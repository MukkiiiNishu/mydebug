package com.example.breakpointcondition;

import com.intellij.codeInsight.completion.*;
import com.intellij.codeInsight.lookup.LookupElementBuilder;
import com.intellij.openapi.util.Key;
import com.intellij.openapi.util.text.StringUtil;
import com.intellij.patterns.PlatformPatterns;
import com.intellij.psi.JavaCodeFragment;
import com.intellij.psi.PsiFile;
import com.intellij.util.ProcessingContext;
import org.jetbrains.annotations.NotNull;

/**
 * A CompletionContributor that provides custom suggestions in the Java breakpoint condition editor.
 * The suggestions are always shown irrespective of the typed prefix.
 * Each suggestion is flagged with a special key so that a custom weigher can boost them.
 */
public class BreakpointConditionCompletionContributor extends CompletionContributor {

    // Define a key to mark our plugin's lookup elements.
    public static final Key<Boolean> MY_PLUGIN_KEY = Key.create("MY_PLUGIN_KEY");

    public BreakpointConditionCompletionContributor() {
        extend(
            CompletionType.BASIC,
            // Apply to any PsiElement inside a JavaCodeFragment (used in breakpoint condition editors)
            PlatformPatterns.psiElement().inFile(PlatformPatterns.psiFile(JavaCodeFragment.class)),
            new CompletionProvider<CompletionParameters>() {
                @Override
                protected void addCompletions(@NotNull CompletionParameters parameters,
                                              @NotNull ProcessingContext context,
                                              @NotNull CompletionResultSet resultSet) {
                    PsiFile file = parameters.getOriginalFile();
                    if (!(file instanceof JavaCodeFragment)) {
                        return;
                    }

                    // Capture the current prefix (if needed for dynamic suggestions).
                    final String originalPrefix = resultSet.getPrefixMatcher().getPrefix();

                    // Create a custom PrefixMatcher that always returns true so suggestions are not filtered.
                    CompletionResultSet customResultSet = resultSet.withPrefixMatcher(new PrefixMatcher(originalPrefix) {
                        @Override
                        public boolean prefixMatches(@NotNull String name) {
                            return true;
                        }
                    });

                    // Add fixed suggestions with our plugin flag.
                    customResultSet.addElement(
                        LookupElementBuilder.create("myPluginSuggestion")
                            .putUserData(MY_PLUGIN_KEY, Boolean.TRUE)
                    );
                    customResultSet.addElement(
                        LookupElementBuilder.create("anotherSuggestion")
                            .putUserData(MY_PLUGIN_KEY, Boolean.TRUE)
                    );

                    // Optionally, add a dynamic suggestion based on user input.
                    if (StringUtil.isNotEmpty(originalPrefix)) {
                        customResultSet.addElement(
                            LookupElementBuilder.create("prefixBased_" + originalPrefix)
                                .withTailText(" (dynamic suggestion)", true)
                                .putUserData(MY_PLUGIN_KEY, Boolean.TRUE)
                        );
                    }
                }
            }
        );
    }
}

package com.example.breakpointcondition;

import com.intellij.codeInsight.completion.CompletionLocation;
import com.intellij.codeInsight.completion.CompletionWeigher;
import com.intellij.codeInsight.lookup.LookupElement;
import org.jetbrains.annotations.NotNull;

/**
 * A custom CompletionWeigher that boosts suggestions from our plugin.
 * Elements flagged with MY_PLUGIN_KEY (Boolean.TRUE) receive a lower weight,
 * causing them to be sorted at the top of the completion list.
 */
public class MyPluginCompletionWeigher extends CompletionWeigher {
    @Override
    public Comparable weigh(@NotNull LookupElement element, @NotNull CompletionLocation location) {
        Boolean flag = element.getUserData(BreakpointConditionCompletionContributor.MY_PLUGIN_KEY);
        // Lower weight means higher priority; items without our flag get 0.
        return Boolean.TRUE.equals(flag) ? -1000 : 0;
    }
}

<idea-plugin>
    <id>com.example.breakpointcondition</id>
    <name>Breakpoint Condition Completion</name>
    <vendor email="you@example.com" url="http://example.com">Your Name</vendor>
    <description>
        A sample plugin that provides custom completion suggestions in the breakpoint condition field.
    </description>
    <version>1.0.0</version>

    <extensions defaultExtensionNs="com.intellij">
        <!-- Register the completion contributor for Java code fragments (e.g., breakpoint condition editors) -->
        <completion.contributor 
            language="JAVA"  
            implementationClass="com.example.breakpointcondition.BreakpointConditionCompletionContributor"/>

        <!-- Register the custom weigher to boost our plugin's suggestions -->
        <completion.weigher 
            language="JAVA"
            implementationClass="com.example.breakpointcondition.MyPluginCompletionWeigher" />
    </extensions>
</idea-plugin>
